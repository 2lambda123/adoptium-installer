import net.adoptopenjdk.installer.BuildDebianPackage
import net.adoptopenjdk.installer.UploadDebianPackage

ext.jinfoPriorities = [
    8 : 1081,
    9 : 1091,
    10: 1101,
    11: 1111,
    12: 1121
]

tasks.register("buildDebianPackage", BuildDebianPackage) {
    packageName = "adoptopenjdk-${jdkMajorVersion}-${pkgMetadata.vm}${jdkDistributionType.pkgNameSuffix}"
    packageVersion = cleanPackageVersion(jdkVersion)
    iteration = 2
    priority = jinfoPriorities[jdkMajorVersion]
    architecture = pkgMetadata.architecture
    vm = pkgMetadata.vm
    maintainer = pkgMetadata.maintainer
    vendor = pkgMetadata.vendor
    homepage = pkgMetadata.homepage
    license = pkgMetadata.license
    packageDescription = pkgMetadata.description
    category = "java"
    dependenciesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}${jdkDistributionType.pkgNameSuffix}/dependencies.txt")
    providesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}${jdkDistributionType.pkgNameSuffix}/provides.txt")
    toolsFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}${jdkDistributionType.pkgNameSuffix}/tools.txt")
    prefix = "/usr/lib/jvm"
    afterInstallScript = file("config/postinst.sh")
    beforeRemoveScript = file("config/prerm.sh")
    jinfoFile = file("config/jinfo")
    prebuiltJdkDirectory = jdkDistributionDir
}

build.dependsOn(buildDebianPackage)

tasks.register("uploadDebianPackage", UploadDebianPackage) {
    dependsOn buildDebianPackage

    packageToPublish = buildDebianPackage.getOutputFile()
    apiEndpoint = artifactory.url
    user = artifactory.user
    password = artifactory.password
    repository = artifactory.repository.deb
    packageName = buildDebianPackage.getPackageName()
    architecture = buildDebianPackage.getArchitecture().debQualifier()
    releaseArchitecture amd64: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
    releaseArchitecture s390x: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
    releaseArchitecture ppc64el: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
    releaseArchitecture armhf: [
        debian  : ["jessie", "stretch", "buster"],
        ubuntu  : ["xenial", "bionic", "cosmic", "disco"]
    ]
    releaseArchitecture arm64: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
}

rootProject.tasks.getByName("upload").dependsOn(uploadDebianPackage)

def cleanPackageVersion(String jdkVersion) {
    // Underscores are reserved characters in Deb packages
    return jdkVersion.replaceAll("[_]", "-")
}

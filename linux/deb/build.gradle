import net.adoptopenjdk.installer.BuildDebianPackage
import net.adoptopenjdk.installer.UploadDebianPackage

tasks.register("buildDebianPackage", BuildDebianPackage) {
    packageName = "adoptopenjdk-${jdkMajorVersion}-${pkgMetadata.vm}"
    packageVersion = jdkVersion
    iteration = version
    priority = getJinfoPriority()
    architecture = pkgMetadata.architecture.debQualifier()
    vm = pkgMetadata.vm
    maintainer = pkgMetadata.maintainer
    vendor = pkgMetadata.vendor
    homepage = pkgMetadata.homepage
    license = pkgMetadata.license
    packageDescription = pkgMetadata.description
    category = "java"
    dependenciesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/dependencies.txt")
    providesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/provides.txt")
    toolsFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/tools.txt")
    prefix = "/usr/lib/jvm"
    afterInstallScript = file("config/postinst.sh")
    beforeRemoveScript = file("config/prerm.sh")
    jinfoFile = file("config/jinfo")
    prebuiltJdkDirectory = jdkDistributionDir
}

build.dependsOn(buildDebianPackage)

tasks.register("uploadDebianPackage", UploadDebianPackage) {
    dependsOn buildDebianPackage

    packageToPublish = buildDebianPackage.getOutputFile()
    user = bintray.user
    key = bintray.key
    subject = bintray.subject
    repository = bintray.repository.deb
    packageName = buildDebianPackage.getPackageName()
    packageVersion = buildDebianPackage.getPackageVersion()
    packageDescription = pkgMetadata.description
    licenses = [pkgMetadata.license]
    websiteUrl = pkgMetadata.homepage
    vcsUrl = pkgMetadata.vcsUrl
    architecture = buildDebianPackage.getArchitecture()
    releaseArchitecture amd64: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
    releaseArchitecture s390x: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
    releaseArchitecture ppc64el: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
    releaseArchitecture arm64: [
        debian: ["jessie", "stretch", "buster"],
        ubuntu: ["xenial", "bionic", "cosmic", "disco"]
    ]
    autoPublish = BINTRAY_AUTO_PUBLISH
    autoCreatePackage = true
    autoUpdatePackage = true
}

rootProject.tasks.getByName("upload").dependsOn(uploadDebianPackage)

def getJinfoPriority() {
    return hasProperty("DEB_JINFO_PRIORITY") ? Integer.parseInt(DEB_JINFO_PRIORITY) : 0
}

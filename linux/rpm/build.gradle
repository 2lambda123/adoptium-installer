import net.adoptopenjdk.installer.BuildRpmPackage
import net.adoptopenjdk.installer.UploadRpmPackage

tasks.register("buildRedHatRpmPackage", BuildRpmPackage) {
    packageName = "adoptopenjdk-${jdkMajorVersion}-${pkgMetadata.vm}"
    packageVersion = jdkVersion
    iteration = version
    architecture = pkgMetadata.architecture.rpmQualifier()
    vm = pkgMetadata.vm
    maintainer = pkgMetadata.maintainer
    vendor = pkgMetadata.vendor
    homepage = pkgMetadata.homepage
    license = pkgMetadata.license
    packageDescription = pkgMetadata.description
    category = "java"
    dependenciesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/dependencies.txt")
    providesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/provides.txt")
    prefix = "/usr/lib/jvm"
    afterInstallScript = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/postinst.sh")
    beforeRemoveScript = file("config/prerm.sh")
    prebuiltJdkDirectory = jdkDistributionDir
    variant = "redhat"
}

tasks.register("buildSuseRpmPackage", BuildRpmPackage) {
    packageName = "adoptopenjdk-${jdkMajorVersion}-${pkgMetadata.vm}"
    packageVersion = jdkVersion
    iteration = version
    architecture = pkgMetadata.architecture.rpmQualifier()
    vm = pkgMetadata.vm
    maintainer = pkgMetadata.maintainer
    vendor = pkgMetadata.vendor
    homepage = pkgMetadata.homepage
    license = pkgMetadata.license
    packageDescription = pkgMetadata.description
    category = "java"
    dependenciesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/dependencies.txt")
    providesFile = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/provides.txt")
    prefix = "/usr/lib64/jvm"
    afterInstallScript = file("config/jdk-${jdkMajorVersion}-${pkgMetadata.vm}/postinst.sh")
    beforeRemoveScript = file("config/prerm.sh")
    prebuiltJdkDirectory = jdkDistributionDir
    variant = "suse"
    signPackage = getSignPackageProperty()
}

task buildRpmPackage {
    dependsOn buildRedHatRpmPackage, buildSuseRpmPackage
}

build.dependsOn(buildRpmPackage)

tasks.register("uploadRedHatRpmPackage", UploadRpmPackage) {
    dependsOn buildRedHatRpmPackage

    packageToPublish = buildRedHatRpmPackage.getOutputFile()
    user = bintray.user
    key = bintray.key
    subject = bintray.subject
    repository = bintray.repository.rpm
    packageName = buildRedHatRpmPackage.getPackageName()
    packageVersion = buildRedHatRpmPackage.getPackageVersion()
    packageDescription = pkgMetadata.description
    licenses = [pkgMetadata.license]
    websiteUrl = pkgMetadata.homepage
    vcsUrl = pkgMetadata.vcsUrl
    architecture = buildRedHatRpmPackage.getArchitecture()
    releaseArchitecture x86_64: [
        centos: ["6", "7", "8"],
        rhel  : ["6", "7", "8"],
        fedora: ["29", "30"]
    ]
    releaseArchitecture s390x: [
        centos: ["6", "7", "8"],
        rhel  : ["6", "7", "8"]
    ]
    releaseArchitecture ppc64le: [
        centos: ["6", "7", "8"],
        rhel  : ["6", "7", "8"]
    ]
    releaseArchitecture aarch64: [
        centos: ["6", "7", "8"],
        rhel  : ["6", "7", "8"]
    ]
    autoPublish = BINTRAY_AUTO_PUBLISH
    autoCreatePackage = true
    autoUpdatePackage = true
}

tasks.register("uploadSuseRpmPackage", UploadRpmPackage) {
    dependsOn buildSuseRpmPackage

    packageToPublish = buildSuseRpmPackage.getOutputFile()
    user = bintray.user
    key = bintray.key
    subject = bintray.subject
    repository = bintray.repository.rpm
    packageName = buildSuseRpmPackage.getPackageName()
    packageVersion = buildSuseRpmPackage.getPackageVersion()
    packageDescription = pkgMetadata.description
    licenses = [pkgMetadata.license]
    websiteUrl = pkgMetadata.homepage
    vcsUrl = pkgMetadata.vcsUrl
    architecture = buildSuseRpmPackage.getArchitecture()
    releaseArchitecture x86_64: [
        opensuse: ["15.0"],
        sles    : ["12", "15"]
    ]
    releaseArchitecture s390x: [
        sles: ["12", "15"]
    ]
    releaseArchitecture ppc64le: [
        sles: ["12", "15"]
    ]
    releaseArchitecture aarch64: [
        sles: ["12", "15"]
    ]
    autoPublish = BINTRAY_AUTO_PUBLISH
    autoCreatePackage = true
    autoUpdatePackage = true
}

tasks.register("uploadRpmPackage") {
    group = "upload"
    description = "Uploads all RPM packages"
    dependsOn uploadRedHatRpmPackage, uploadSuseRpmPackage
}

rootProject.tasks.getByName("upload").dependsOn(uploadRpmPackage)

def getSignPackageProperty() {
    return hasProperty("SIGN_PACKAGE") ? Boolean.parseBoolean(SIGN_PACKAGE) : false
}
